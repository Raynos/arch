var pd = require("pd");

var Resource = {
	/*
		Constructs a resource

		@param Object methods - A hash of HTTP methods and callbacks

		@return Resource
	*/
	constructor: function _constructor(methods) {
		this.methods = methods || {};
		this.handler = (function _handleResource(req, res, next) {
			var cb = this.methods[req.method];
			if (cb) {
				cb(req, res, next)
			} else {
				next();
			}
		}).bind(this);
	}
};

/*
	Methods for the HTTP verbs

	Examples:

		resource.get(function(req, res) { res.end("GET!"); });

	@param Function cb - callback to be trigger when a http request
		is made on the server for this verb
*/
["get", "post", "put", "delete", "head", "options"].forEach(function _each(method) {
	Resource[method] = function _method(cb) {
		this.methods[method.toUpperCase()] = cb;
	}
});



var Rest = {
	/*
		Generates a new Rest object

		@return Rest
	*/
	constructor: function _constructor() {
		this._resources = [];
	},
	/*
		Adds a resource for an uri regular expression and
		adds the methods to the resource

		Examples:

			rest.resource(/^\/blog$/, {
				GET: function (req, res) { res.end("GET /blog"); }
			});

		@param RegExp uri - A regular expression to match the url of 
			the incoming request to
		@param Object methods - A hash of methods and callbacks

		@return Resource
	*/
	resource: function _resource(uri, methods) {
		var resource = pd.new(Resource, methods);
		this._resources.push([uri, resource]);
		return resource;
	},
	/*
		Generates a router for resources as middleware, intended
		to be added to the server stack.

		Examples:

			server.stack.use(server.router());

		@return Function
	*/
	router: function _router() {
		var rest = this;
		return function _router(req, res) {
			var pathname = req.url;
			for (var i = 0, len = rest._resources.length; i < len; i++) {
				var tuple = rest._resources[i],
					regexp = tuple[0],
					resource = tuple[1];
				
				this.regexp = regexp.exec(pathname);
				if (this.regexp !== null) {
					return resource.handler.apply(this, arguments);
				}
			}
			this.next();
		};
	}
};

module.exports = {
	Rest: Rest,
	Resource: Resource
};